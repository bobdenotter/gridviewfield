{#=== Options ============================================================================#}

{% set attr_opt = {
    class:        field.class|default(''),
    name:         name,
    key:          contentkey,
    required:     field.required|default(false),
    readonly:     field.readonly|default(false)
}%}

{% if context.content.get(contentkey) is empty or context.content.get(contentkey) is not json or context.content.get(contentkey) == '[]' %}
    {% set currentvalue = '[[]]' %}
{% else %}
    {% set currentvalue = context.content.get(contentkey) %}
{% endif %}

{% set minimumcolumns = max(field.columns|length, field.minimumcolumns, 1) %}

{#=== FIELDSET ============================================================================#}

<fieldset class="grid">
    <div class="col-sm-12">
        <div>
            <label class="control-label">{{field.label|default(key)}}</label>
        </div>

        <div id="hot-{{key}}" style='width: 100%; border-right: 1px solid #DDD; border-bottom: 1px solid #DDD; background-color: #F8F8F8;z-index: 1;'></div>
        <script>
            jQuery(document).ready(function($) {
                function checkGridInit() {
                    if ($('#hot-{{key}}').parents('.tab-pane').hasClass('active')){
                        var data = {{ currentvalue|raw }};

                        var container = document.getElementById('hot-{{key}}');
                        var hot = new Handsontable(container,{
                            autoColumnSize: true,
                            minSpareRows: 1,
                            preventOverflow: 'horizontal',
                            width: '100%',
                            height: {{ field.height|default(100) }},
                            minCols: {{ minimumcolumns }},
                            stretchH: 'all',
                            data: data,
                            colHeaders: {{ (field.columns is iterable ? "[ '" ~ field.columns|join("', '")|raw ~ "' ]" : (field.colheaders ? 'true' : 'false'))|raw }},
                            columnSorting: {{field.sorting ? 'true' : 'false'}},
                            sortIndicator: {{field.sorting ? 'true' : 'false'}},
                            rowHeaders: {{field.rowheaders ? 'true' : 'false'}},
                            manualRowMove: {{field.rowmove ? 'true' : 'false'}},
                            maxCols: {{field.maximumcols ? field.maximumcols : 1000}},
                            contextMenu: true,
                            manualColumnResize: true,
                            afterRender: updateData,
                            afterColumnSort: updateData,
                            afterRowMove: updateData
                        });
                        function updateData(changes, source) {
                            if (hot) {
                                var data = this.getData(0, 0, hot.countRows() - 1, hot.countCols() - 1); // Because #989
                                data = data.filter(function(row) {
                                    var filteredRow = row.filter(function(cell) {
                                        return cell !== null ? cell : false;
                                    });
                                    return filteredRow.length > 0 ? filteredRow : false;
                                });
                                jQuery('#gridfield-{{key}}').val(JSON.stringify(data));
                            }
                        }
                        container.hot = hot;
                    }else{
                        setTimeout(checkGridInit, 500);
                    }
                }
                checkGridInit();
            });
        </script>
        <input type="hidden" name="{{name}}" id="gridfield-{{key}}" value="{{ currentvalue }}">
    </div>
</fieldset>
